"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrangeMoneyErrorMessage = exports.ApiErrorType = exports.OrangeMoneyPaymentStatus = exports.ConstantRequestField = exports.ApiKey = void 0;
var ApiKey;
(function (ApiKey) {
    ApiKey["keyAuthorization"] = "Authorization";
    ApiKey["keyGrantType"] = "grant_type";
    ApiKey["keyContentType"] = "Content-Type";
    ApiKey["keyXAuthToken"] = "X-AUTH-TOKEN";
    ApiKey["keyMerchantKey"] = "merchant_key";
    ApiKey["keyCurrency"] = "currency";
    ApiKey["keyOrderId"] = "order_id";
    ApiKey["keyReturnUrl"] = "return_url";
    ApiKey["keyCancelUrl"] = "cancel_url";
    ApiKey["keyWebNotifyUrl"] = "notif_url";
    ApiKey["keyLang"] = "lang";
    ApiKey["keyReference"] = "reference";
    ApiKey["keyAmount"] = "amount";
    ApiKey["keyPayToken"] = "pay_token";
    ApiKey["keySubscriberMsisdn"] = "subscriberMsisdn";
    ApiKey["keyChannelUserMsisdn"] = "channelUserMsisdn";
    ApiKey["keyDescription"] = "description";
    ApiKey["keyMobileOrderId"] = "orderId";
    ApiKey["keyPin"] = "pin";
    ApiKey["keyMobilePayToken"] = "payToken";
    ApiKey["keyMobileNotifUrl"] = "notifUrl";
})(ApiKey = exports.ApiKey || (exports.ApiKey = {}));
/**
 * Contains request fields.
 */
class ConstantRequestField {
}
exports.ConstantRequestField = ConstantRequestField;
//  The content type field.
ConstantRequestField.typeJson = 'application/json';
// The url encode form.
ConstantRequestField.TypeWwwFrom = 'application/x-www-form-urlencoded';
// The basic authorization field.
ConstantRequestField.basic = 'Basic ';
//  The authorization field.
ConstantRequestField.authorization = 'AUTHORIZATION';
// The bearer field.
ConstantRequestField.bearer = 'Bearer ';
// The grant type field.
ConstantRequestField.grantType = 'grant_type';
//  The client credentials field.
ConstantRequestField.clientCredentials = 'client_credentials';
//  The X-AUTH-TOKEN field.
ConstantRequestField.xAuthToken = 'X-AUTH-TOKEN';
/**
 * The orange money payment status.
 */
var OrangeMoneyPaymentStatus;
(function (OrangeMoneyPaymentStatus) {
    /**
     * User has clicked on “Confirmed”, transaction
     * is in progress on Orange system.
     */
    OrangeMoneyPaymentStatus["PENDING_PAYMENT"] = "PENDING";
    /**
     * The user canceled the payment.
     */
    OrangeMoneyPaymentStatus["CANCELLED_PAYMENT"] = "CANCELLED";
    /**
     * Waiting for user entry.
     * Specially for web.
     */
    OrangeMoneyPaymentStatus["INITIATE_PAYMENT"] = "INITIATED";
    /**
     * Payment is done for mobile.
     */
    OrangeMoneyPaymentStatus["SUCCESSFULL_MOBILE_PAYMENT"] = "SUCCESSFULL";
    /**
     * Payment is done for web.
     */
    OrangeMoneyPaymentStatus["SUCCESS_WEB_PAYMENT"] = "SUCCESS";
    /**
     * Payment has failed.
     * On web, the status can failed when user press to confirm payment too
     * late or when user enter a wrong validation code.
     * On mobile, it may fail when the user does not have a mooney orange wallet
     * or the account balance is insufficient.
     */
    OrangeMoneyPaymentStatus["FAILED_PAYMENT"] = "FAILED";
    /**
     * User has clicked on “Confirmed” too late (after token’s validity), or the
     * delay token timeout has expired.
     * Note that the minimum token expiration time is 7 min.
     */
    OrangeMoneyPaymentStatus["EXPIRED_PAYMENT"] = "EXPIRED";
})(OrangeMoneyPaymentStatus = exports.OrangeMoneyPaymentStatus || (exports.OrangeMoneyPaymentStatus = {}));
var ApiErrorType;
(function (ApiErrorType) {
    ApiErrorType["insufficientFunds"] = "insufficientFunds";
    ApiErrorType["invalidOrangeMoneyNumber"] = "invalidOrangeMoneyNumber";
    ApiErrorType["invalidData"] = "invalidData";
    ApiErrorType["failedToInitiateThePayment"] = "failedToInitiateThePayment";
    ApiErrorType["failedToGenerateAccessToken"] = "failedToGenerateAccessToken";
    ApiErrorType["failedToCheckPaymentStatus"] = "failedToCheckPaymentStatus";
    ApiErrorType["failedToGeneratePayToken"] = "failedToGeneratePayToken";
    ApiErrorType["accountLocked"] = "accountLocked";
    ApiErrorType["invalidPaymentAmount"] = "invalidPaymentAmount";
    ApiErrorType["unauthorized"] = "unauthorized";
})(ApiErrorType = exports.ApiErrorType || (exports.ApiErrorType = {}));
var OrangeMoneyErrorMessage;
(function (OrangeMoneyErrorMessage) {
    OrangeMoneyErrorMessage["beneficiaryNotFound"] = "Beneficiaire introuvable";
    OrangeMoneyErrorMessage["insufficientFunds"] = "Le solde du compte du payeur est insuffisant";
    OrangeMoneyErrorMessage["accountLocked"] = "Utilisateur bloque";
    OrangeMoneyErrorMessage["invalidPaymentAmount"] = "Vous avez saisi un montant superieur au montant maximum autorise";
})(OrangeMoneyErrorMessage = exports.OrangeMoneyErrorMessage || (exports.OrangeMoneyErrorMessage = {}));
//# sourceMappingURL=constants.js.map