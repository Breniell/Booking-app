"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const requests = __importStar(require("../../utils/https"));
const utils_1 = require("../../utils/utils");
const get_pay_token_1 = require("./get_pay_token");
const payTokenResponse = {
    message: 'success',
    data: {
        payToken: 'MP220807558VEF7A9C4F09AED',
    },
};
const logger = console;
describe('Test the generation of payToken', () => {
    it('Generate the payToken failed due to invalid credential.', async () => {
        jest.spyOn(requests, 'postRequest').mockImplementationOnce(() => Promise.resolve({
            error: {
                responseError: {
                    data: [Object],
                    status: 401,
                    statusText: 'Unauthorized',
                    headers: null,
                },
            },
        }));
        const result = await (0, get_pay_token_1.getPayToken)({
            logger: logger,
            apiPassword: 'secret',
            apiUserName: 'secret',
            targetEnvironment: utils_1.TargetEnvironment.fake,
            xAuthToken: 'ABCDEGHIJKLMNOPQRSTUVW',
        }, '1e23bee1-37dc-3015-a7d6-cb70e566bd64', 'https://api.paytoken.co');
        expect(result.error).toBeDefined();
    });
    it('Generate the payToken successfully', async () => {
        jest.spyOn(requests, 'postRequest').mockImplementationOnce(() => Promise.resolve({
            response: {
                data: payTokenResponse,
                status: 202,
            },
        }));
        const result = await (0, get_pay_token_1.getPayToken)({
            logger: logger,
            apiPassword: 'secret',
            apiUserName: 'secret',
            targetEnvironment: utils_1.TargetEnvironment.fake,
            xAuthToken: 'ABCDEGHIJKLMNOPQRSTUVW',
        }, '1e23bee1-37dc-3015-a7d6-cb70e566bd64', 'https://api.paytoken.co');
        expect(result.data).toBe('MP220807558VEF7A9C4F09AED');
    });
});
//# sourceMappingURL=get_pay_token.spec.js.map