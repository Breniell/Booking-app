"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const requests = __importStar(require("../../utils/https"));
const constants_1 = require("../utils/constants");
const utils_1 = require("../../utils/utils");
const get_payment_status_1 = require("./get_payment_status");
const logger = console;
describe('Test the status verification', () => {
    const mobilePaymentParamForCheckStatus = {
        accessToken: '1e23bee1-37dc-3015-a7d6-cb70e566bd64',
        payToken: 'MP220807558VEF7A9C4F09AED',
    };
    it('Return the payment status', async () => {
        var _a;
        jest.spyOn(requests, 'getRequest').mockResolvedValue({
            response: {
                status: 200,
                data: {
                    message: 'Transaction retrieved successfully',
                    data: {
                        id: 74581010,
                        createtime: '1682001669',
                        subscriberMsisdn: '655637944',
                        amount: 1100,
                        payToken: 'MP23042031A1724A914DF0382D01',
                        txnid: 'MP230420.1541.C39196',
                        txnmode: 'zSapffVPWccheVZQRtvG',
                        inittxnmessage: 'Paiement e la clientele done.The devrez confirmer le paiement en saisissant son code PIN et vous recevrez alors un SMS. Merci dutiliser des services Orange Money.',
                        inittxnstatus: '200',
                        confirmtxnstatus: '200',
                        confirmtxnmessage: 'Paiement de SPREELOOP reussi par 655637944 PEKE. ID transaction:MP230420.1541.C39196, Montant:1100 FCFA. Solde: 55.81 FCFA.',
                        status: 'SUCCESSFULL',
                        notifUrl: 'https://europe-west1-place-prod.cloudfunctions.net/api-1/payment/orange_money/live/zSapffVPWccheVZQRtvG',
                        description: 'Commande',
                        channelUserMsisdn: '696431937',
                    },
                },
            },
        });
        const result = await (0, get_payment_status_1.getPaymentStatus)({
            mobileStatusVerificationParams: mobilePaymentParamForCheckStatus,
            paymentServiceConfig: {
                targetEnvironment: utils_1.TargetEnvironment.fake,
                xAuthToken: 'ABCDEGHIJKLMNOPQRSTUVW',
                apiUserName: 'secret',
                apiPassword: 'secret',
                logger: logger,
            },
            endPoint: 'https://api.paytoken.co',
        });
        expect((_a = result.data) === null || _a === void 0 ? void 0 : _a.status).toBe(constants_1.OrangeMoneyPaymentStatus.SUCCESSFULL_MOBILE_PAYMENT);
    });
    it('Return the error response', async () => {
        jest.spyOn(requests, 'getRequest').mockResolvedValue({
            error: {
                responseError: {
                    data: [Object],
                    status: 401,
                    statusText: 'Unauthorized',
                    headers: null,
                },
            },
        });
        const result = await (0, get_payment_status_1.getPaymentStatus)({
            mobileStatusVerificationParams: mobilePaymentParamForCheckStatus,
            paymentServiceConfig: {
                targetEnvironment: utils_1.TargetEnvironment.fake,
                xAuthToken: 'ABCDEGHIJKLMNOPQRSTUVW',
                apiUserName: 'secret',
                apiPassword: 'secret',
                logger: logger,
            },
            endPoint: 'https://api.paytoken.co',
        });
        expect(result.error).toBeDefined();
    });
});
//# sourceMappingURL=get_payment_status.spec.js.map