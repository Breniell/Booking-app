"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DisbursementLive = void 0;
const transfer_1 = require("../../operations/transfer");
const create_access_token_1 = require("../../operations/create_access_token");
const routes_1 = require("../../routes/routes");
const get_transfer_status_1 = require("../../operations/get_transfer_status");
/**
 * Orange Money API Live Disbursement.
 * @class
 */
class DisbursementLive {
    /**
     * Constructs a new {Disbursement}.
     * @constructor
     * @param {DisbursementServiceConfig} config - The required global route configuration.
     */
    constructor(config) {
        this.routes = new routes_1.Routes();
        this.config = config;
    }
    /**
     * Creates an access token.
     *
     * @return {Promise<CreateAccessTokenResponse>} The method response containing a string and a token.
     */
    async createAccessToken() {
        return await (0, create_access_token_1.createAccessToken)({
            configs: this.config,
            endPoint: this.routes.createAccessToken(),
        });
    }
    /**
     * Transfers the specified amount of money from one account to another.
     *
     * @param {TransferRequest} params - The parameters for the transfer.
     * @return {Promise<TransferResponse>} - The response from the transfer method.
     */
    async transfer(params) {
        return await (0, transfer_1.transfer)({
            configs: this.config,
            params: params,
            endPoint: this.routes.transfer(),
        });
    }
    /**
     * Retrieves the status of a transfer.
     *
     * @param {GetTransferStatusRequest} params - The parameters for retrieving the transfer status.
     * @return {Promise<GetTransferStatusResponse>} - The method response containing the status and transfer status response.
     */
    async getTransferStatus(params) {
        return await (0, get_transfer_status_1.getTransferStatus)({
            configs: this.config,
            params: params,
            endPoint: this.routes.transferStatus(params.messageId),
        });
    }
}
exports.DisbursementLive = DisbursementLive;
//# sourceMappingURL=live.js.map