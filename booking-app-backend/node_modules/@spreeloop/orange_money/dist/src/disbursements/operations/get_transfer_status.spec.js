"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const requests = __importStar(require("../../utils/https"));
const constants_1 = require("../utils/constants");
const status_1 = require("../utils/status");
const get_transfer_status_1 = require("./get_transfer_status");
describe('getTransferStatus', () => {
    it('should fail on invalid parameter provided', async () => {
        const { error, data, raw } = await (0, get_transfer_status_1.getTransferStatus)({
            configs: {
                channelUserMsisdn: '',
                clientId: '',
                clientSecret: '',
                customerKey: '',
                customerSecret: '',
                pin: '',
                environment: constants_1.DisbursementXTargetEnvironmentType.sandbox,
                logger: console,
            },
            params: {
                token: 55,
                messageId: 'messageId',
            },
            endPoint: 'https://example.com',
        });
        expect(data).not.toBeDefined();
        expect(raw).not.toBeDefined();
        expect(error).toBeDefined();
    });
    it('should fail on request failure', async () => {
        const requestSpy = jest
            .spyOn(requests, 'getRequest')
            .mockImplementation()
            .mockResolvedValue({
            error: {},
        });
        const { error, data, raw } = await (0, get_transfer_status_1.getTransferStatus)({
            configs: {
                channelUserMsisdn: '237699947943',
                clientId: 'clientId',
                clientSecret: 'clientSecret',
                customerKey: 'customerKey',
                customerSecret: 'customerSecret',
                pin: 'pin',
                environment: constants_1.DisbursementXTargetEnvironmentType.sandbox,
                logger: console,
            },
            params: {
                token: 'token',
                messageId: 'messageId',
            },
            endPoint: 'https://example.com',
        });
        expect(data).not.toBeDefined();
        expect(raw).not.toBeDefined();
        expect(requestSpy).toHaveBeenCalledTimes(1);
        expect(error).toBeDefined();
    });
    it('should succeed on request succeed', async () => {
        var _a;
        const succeedEg = {
            result: {
                message: 'message',
                data: {
                    createtime: 'createtime',
                    subscriberMsisdn: 'subscriberMsisdn',
                    amount: 500,
                    payToken: 'payToken',
                    txnid: 'txnid',
                    txnmode: 'txnmode',
                    txnstatus: 'txnstatus',
                    orderId: 'orderId',
                    status: status_1.DisbursementApiRawStatus.succeeded,
                    channelUserMsisdn: 'channelUserMsisdn',
                    description: 'description',
                },
            },
            parameters: {
                amount: 500,
                xauth: 'xauth',
                channel_user_msisdn: 'channel_user_msisdn',
                customer_key: 'customer_key',
                customer_secret: 'customer_secret',
                final_customer_name: 'final_customer_name',
                final_customer_phone: 'final_customer_phone',
            },
            CreateAt: 'CreateAt',
            MessageId: 'MessageId',
            RefundStep: get_transfer_status_1.DisbursementStep.TransferSent,
        };
        const requestSpy = jest
            .spyOn(requests, 'getRequest')
            .mockImplementation()
            .mockResolvedValue({
            response: { data: Object(succeedEg) },
        });
        const { error, data, raw } = await (0, get_transfer_status_1.getTransferStatus)({
            configs: {
                channelUserMsisdn: '237699947943',
                clientId: 'clientId',
                clientSecret: 'clientSecret',
                customerKey: 'customerKey',
                customerSecret: 'customerSecret',
                pin: 'pin',
                environment: constants_1.DisbursementXTargetEnvironmentType.sandbox,
                logger: console,
            },
            params: {
                token: 'token',
                messageId: 'messageId',
            },
            endPoint: 'https://example.com',
        });
        expect(error).not.toBeDefined();
        expect(requestSpy).toHaveBeenCalledTimes(1);
        expect(raw).toEqual(succeedEg);
        expect((_a = raw === null || raw === void 0 ? void 0 : raw.parameters) === null || _a === void 0 ? void 0 : _a.customer_secret).toBeNull();
        expect(data).toStrictEqual({
            status: status_1.DisbursementStatus.succeeded,
            refundStep: get_transfer_status_1.DisbursementStep.TransferSent,
        });
    });
});
//# sourceMappingURL=get_transfer_status.spec.js.map