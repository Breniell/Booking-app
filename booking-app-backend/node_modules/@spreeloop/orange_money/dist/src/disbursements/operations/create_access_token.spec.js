"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = require("axios");
const requests = __importStar(require("../../utils/https"));
const constants_1 = require("../utils/constants");
const create_access_token_1 = require("./create_access_token");
describe('createAccessToken', () => {
    it('Should fail on invalid parameter', async () => {
        const result = await (0, create_access_token_1.createAccessToken)({
            endPoint: '',
            configs: {
                channelUserMsisdn: '',
                clientId: '',
                clientSecret: '',
                customerKey: '',
                customerSecret: '',
                pin: '',
                environment: constants_1.DisbursementXTargetEnvironmentType.sandbox,
                logger: console,
            },
        });
        expect(result.data).toBeUndefined();
    });
    it('Should fail on request rejection', async () => {
        const errorMessage = 'mock reject the request';
        const postSpy = jest
            .spyOn(requests, 'postRequest')
            .mockImplementation()
            .mockResolvedValue({ error: new axios_1.AxiosError(errorMessage) });
        const result = await (0, create_access_token_1.createAccessToken)({
            endPoint: 'https://route.com/link',
            configs: {
                channelUserMsisdn: '237699947943',
                clientId: 'clientId',
                clientSecret: 'clientSecret',
                customerKey: 'customerKey',
                customerSecret: 'customerSecret',
                pin: 'pin',
                environment: constants_1.DisbursementXTargetEnvironmentType.sandbox,
                logger: console,
            },
        });
        expect(postSpy).toHaveBeenCalledTimes(1);
        expect(result.data).toBeUndefined();
        expect(result.error).toBeDefined();
        postSpy.mockRestore();
    });
    it('Should successfully retrieve token', async () => {
        const accessToken = 'THEaCCESStOKEN';
        const postSpy = jest
            .spyOn(requests, 'postRequest')
            .mockImplementation()
            .mockResolvedValue({
            response: {
                data: {
                    access_token: accessToken,
                },
            },
        });
        const result = await (0, create_access_token_1.createAccessToken)({
            endPoint: 'https://route.com/link',
            configs: {
                channelUserMsisdn: '237699947943',
                clientId: 'clientId',
                clientSecret: 'clientSecret',
                customerKey: 'customerKey',
                customerSecret: 'customerSecret',
                pin: 'pin',
                environment: constants_1.DisbursementXTargetEnvironmentType.sandbox,
                logger: console,
            },
        });
        expect(postSpy).toHaveBeenCalledTimes(1);
        expect(result.error).toBeUndefined();
        expect(result.raw).toEqual({
            access_token: accessToken,
        });
        expect(result.data).toBe(accessToken);
        postSpy.mockRestore();
    });
});
//# sourceMappingURL=create_access_token.spec.js.map